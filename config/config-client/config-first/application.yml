# phần này dùng để test App sẽ lấy config từ ConfigServer trc. Sau đó mới connect tới eureka Server để register
# như vậy phần config Eureka cho app sẽ lấy từ configServer
spring:
  application:
    name:  config-client     # tên này đc load sau sẽ ghi đè lên tên trc đó
    instance_id: config-first
    version: 2.0
message: " default profile: configServer first, eurekaServer second"

# server.port = 0 = auto assign thì ${server.port} = 0 => đây là vấn đề.
# springboot config gặp vấn đề về thứ tự config của lib
server:
  port: 8022

myLib:
  param1: value1
  param2: value2
  comment: "dùng @ConfigurationProperties để map thông tin sau với JavaObject"


# ======================================= Eureka client config ====================
# Spring Cloud đã tự động add các tham số vào mục này cho ta. Tuy nhiên ta có thể overide nó ở đây để thay đổi
# để ý cấu trúc của spring-cloud-starter-netflix-eureka-client khác với thư viện trc đây
# nếu sai cấu trúc yaml sẽ ko run
# https://cloud.spring.io/spring-cloud-netflix/multi/multi__service_discovery_eureka_clients.html
eureka:
  # {@link org.springframework.cloud.netflix.eureka.EurekaClientConfigBean}
  client:
    enabled: true
    region: region1          # 1 region có nhiều zone. region giống như vùng vật lý: Vietnam, US, china
    registerWithEureka: true   # true: đăng ký chính nó là Service với Server để các Service khác discovery đc nó (hiển thị trên server)
    fetchRegistry: true       # True: đăng ký fetch thông tin về các services available in Server
      # có service đăng ký với server để các service khác fetch info, nhưng ko có nhu cầu fetch info
    # có service ko đăng ký nó là service với server, nhưng lại có nhu cầu fetch info service khác
    serviceUrl:
      # có nhiều Eureka server tạo thành 1 cluster trong đó có 1 master
      # defaultZone: là địa chỉ của master
      # dùng domain config ở "C:\Windows\System32\drivers\etc\hosts"
      defaultZone: http://my-eureka-server.com:9000/eureka/
    preferSameZoneEureka: true  # ưu tiên các service khác kết nối với Instance này có cùng zone
    availabilityZones: # client chủ động, chỉ đc kết nối tới các zones này
      region-vn: zone1
  # {@link org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean}
  instance:
    # nếu ko thiết lập sẽ dùng ${spring.application.name}
    appname: ${spring.application.name}  # đây là serviceId để gom nhóm các instance cùng 1 service
    # instanceId phải là duy nhất :${random.value}
    instanceId: ${spring.application.name}:${spring.application.instance_id}:${eureka.instance.hostname}:${server.port}
    # Address của instance này sẽ phục vụ. Nếu ko khai báo Springboot sẽ tự động add address ethernet vào (ko phải localhost)
    # 1 computer có thể có nhiểu network interfaces vì thế cần thiết lập
    # xem code Springboot MainController chỉ cho phép thiết lập 1 Address
    hostname: localhost
    statusPageUrl: http://localhost:${server.port}/actuator/info     # thông tin hiển thị trên Eureka server mục status
    healthCheckUrl: http://localhost:${server.port}/actuator/health  # nếu enable tính năng HealthCheck thì server sẽ dùng tới nó
    homePageUrl: http://localhost:${server.port}/
    # true: instance sẽ qui đổi hostname ra IP Address tương ứng và gửi tới EurekaServer
    # false: sẽ giữ nguyên hostname khi gửi EurekaServer
    preferIpAddress: false
    # metadataMap: là data ta thêm vào dạng HashMap tùy ý.
    # Eureka server chỉ xử lý các field chuẩn, ko xử lý fields ở metadata
    metadataMap:
      zone: zone1   # cho Ribbon loadbalancer
      version: 1.0
      author: Hungbeo
      company: myCompany

# ========================================== logging ===========================
# log level khác với Log4j2: OFF FATAL ERROR WARN INFO DEBUG TRACE
logging:
  level:
    root: TRACE
    org.springframework.web: INFO
    org.springframework.cloud: TRACE
    org.springframework.*: INFO
    org.hibernate: WARN

# ============================================= actuator =======================
# Mornitor tool for: CPU, RAM, ...
#   http://localhost:8001/actuator
# lưu ý nếu bên thứ 3 truy cập vào Actuator server bằng browser thì cần phải enable CORS ở mục này (dùng lib thì ko cần)
management:
  #server:
    #port: ${server.port}  # để cùng Port với Server.port cũng ko sao. Bản chất là add controller của actuator vào server thôi
  # thay đổi contextPath của actuator
  #context-path:/actuator
  endpoints:
    # có thể expose Mornitor ra các chuẩn khác nhau (ở Prometheus gọi là exporter)
    # expose dạng "web" hoặc "jmx" (là 1 protocol của java) => thay "web" bằng "jmx" là đc
    # management.endpoints.jmx.exposure.include=health,info,env,beans
    web:
      exposure:
        # management.endpoints.web.exposure.include=beans, loggers, health, env
        include: "*"    # cho phép các tính năng hoạt động: cache, env, info, metric,...
        # management.endpoints.web.exposure.exclude=threaddump
      shutdown:
        enabled: true
  # mỗi 1 endpoint sẽ có 1 option thiết lập riêng
  # hiển thị chi tiết thông tin của health giống cách mà Vertx làm => STATUS parent = UP khi tất cả các child của nó UP
  endpoint:
    health:
      show-details: always
      enabled: true # false: disable tính năng này ở Actuator. Nhưng EurekaClient vẫn dùng thư viện Actuator/healthCheck bình thuòng
    info:
      enabled: true # false: actuator server sẽ ko expose tính năng này ra web
    configprops:
      enabled: true # false: actuator server sẽ ko expose tính năng này ra web
  # phải có cái này thì mới cho phép lấy thông tin Env "info" để add vào "/actuator/info"
  info:
    env:
      enabled: true
# ===================================== "/actuator/info"
# Actuator sẽ tự động add tất cả các thuộc tính của "info:" vào "/actuator/info"
# ${local.server.port}: = server.port nhưng địa chỉ này ở runtime đc
info:
  app:
    name: ${eureka.instance.instanceId}
    version: 1.2
    description: learn Springboot
    homeUrl: http://${eureka.instance.hostname}:${local.server.port}/actuator/info
    note: "dùng http request trực tiếp lấy thông tin ở spring configServer"
    configServerUrl: http://localhost:8887/${spring.application.name}/default/${spring.application.instance-id}
    test1: "lấy thông tin về app ở application.yml dùng @value"
    testUrl: http://${eureka.instance.hostname}:${local.server.port}/
    test2: "lấy properties Mylib.* từ file application.yml dùng @configurationProperties "
    test2Url: http://${eureka.instance.hostname}:${local.server.port}/test

---
spring:
  profiles:         # = {profile}
    - dev           # spring-cloud-config-client sẽ gọi Uri = /app1/dev
message: version for dev

---
spring:
  profiles:         # = {profile}
    - prod          # spring-cloud-config-client sẽ gọi Uri = /app1/prod
message: version for product